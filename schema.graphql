type ApplicationFactory @entity @cardinality(value: 5) {
    id: ID!
    applications: [Application!] @derivedFrom(field: "factory")
}

type Application @entity @cardinality(value: 100) {
    id: ID!
    owner: String
    timestamp: BigInt!
    factory: ApplicationFactory
    inputs: [Input!] @derivedFrom(field: "application")
}

type Token @entity @cardinality(value: 10) {
    id: ID!
    name: String!
    symbol: String!
    decimals: Int!
}

type NFT @entity @cardinality(value: 10) {
    id: ID!
    name: String
    symbol: String
}

# ERC-1155 contract representation
type MultiToken @entity @cardinality(value: 10) {
    id: ID!
}

# scalar for erc-1155 tokens data to be used for single and batch deposits
type Erc1155Transfer {
    tokenIndex: BigInt!
    amount: BigInt!
}

type Erc1155Deposit @entity @cardinality(value: 100) {
    id: ID!
    from: String!
    token: MultiToken!
    transfers: [Erc1155Transfer!]
}

type Erc721Deposit @entity @cardinality(value: 100) {
    id: ID!
    from: String!
    token: NFT!
    tokenIndex: BigInt!
}

type Erc20Deposit @entity @cardinality(value: 100) {
    id: ID!
    token: Token!
    from: String!
    amount: BigInt!
}

type Input @entity @cardinality(value: 100) {
    id: ID!
    application: Application!
    index: Int!
    msgSender: String!
    payload: String!
    timestamp: BigInt!
    blockNumber: BigInt!
    blockHash: String!
    transactionHash: String!
    erc20Deposit: Erc20Deposit
    erc721Deposit: Erc721Deposit
    erc1155Deposit: Erc1155Deposit
}
